#!/bin/jash
classpath ../lib/activation-1.1.jar:../lib/dnsjava-2.0.1.jar:../lib/mail-1.4.3.jar
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.Properties;
import javax.mail.Address;
import javax.mail.Message.RecipientType;
import javax.mail.MessagingException;
import javax.mail.NoSuchProviderException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeUtility;
import org.xbill.DNS.Lookup;
import org.xbill.DNS.MXRecord;
import org.xbill.DNS.Record;
import org.xbill.DNS.TextParseException;
import org.xbill.DNS.Type;

class Util {
	public InternetAddress createAddress(String emailAddress) throws UnsupportedEncodingException, AddressException {
		InternetAddress address = new InternetAddress(emailAddress, true);
		String personal = address.getPersonal();
		if(personal != null) {
			address.setPersonal(MimeUtility.encodeText(personal));
		}
		return address;
	}

	public String getArg(String name, String[] args) {
		String arg = null;
		for(int i = 0; arg == null && args != null && i < args.length; i++) {
			if(args[i].equals("--" + name)) {
				arg = args[i + 1];
			}
		}
		return arg;
	}

	public String getMXRecordsForEmailAddress(String eMailAddress) {
		String returnValue = null;
		try {
			String hostName = getHostNameFromEmailAddress(eMailAddress);
			Record[] records = new Lookup(hostName, Type.MX).run();
			if(records == null) {
				throw new RuntimeException("No MX records found for domain " + hostName + ".");
			}

			for(int i = 0; i < records.length; i++) {
				MXRecord mx = (MXRecord) records[i];
				String targetString = mx.getTarget().toString();
				System.err.println("MX-Record for '" + hostName + "':" + targetString);
			}

			// return first entry (not the best solution)
			if(records.length > 0) {
				MXRecord mx = (MXRecord) records[0];
				returnValue = mx.getTarget().toString();
			}
		}
		catch(TextParseException e) {
			throw new RuntimeException(e);
		}

		System.err.println("Using: " + returnValue);
		return returnValue;
	}

	public String getHostNameFromEmailAddress(String mailAddress) throws TextParseException {
		String parts[] = mailAddress.split("@");
		if(parts.length != 2)
			throw new TextParseException("Cannot parse E-Mail-Address: '" + mailAddress + "'");
		return parts[1];
	}
}

Util util = new Util();
InternetAddress toAddress = util.createAddress(util.getArg("to", args));
Properties properties = new Properties();
properties.setProperty("mail.host", util.getMXRecordsForEmailAddress(toAddress.getAddress()));
Session session = Session.getDefaultInstance(properties);
Transport transport = session.getTransport("smtp");
MimeMessage mail = new MimeMessage(session);
mail.addFrom(new Address[] { util.createAddress(util.getArg("from", args)) });
mail.addRecipient(RecipientType.TO, toAddress);
mail.setSubject(util.getArg("subject", args));
String content = "";
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
String line = null;
String LF = System.getProperty("line.separator");
while((line = br.readLine()) != null) {
	content += line + LF;
}
mail.setText(content, System.getProperty("file.encoding"));
transport.connect();
transport.sendMessage(mail, mail.getRecipients(RecipientType.TO));
transport.close();

